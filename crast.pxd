# This code was automatically generated by CWrap version 0.0.0

cdef extern from "grass/raster.h":
    int CELL_TYPE = 0
    int FCELL_TYPE = 1
    int DCELL_TYPE = 2

    ctypedef unsigned char __u_char

    ctypedef unsigned short __u_short

    ctypedef unsigned int __u_int

    ctypedef unsigned long __u_long

    ctypedef signed char __int8_t

    ctypedef unsigned char __uint8_t

    ctypedef short __int16_t

    ctypedef unsigned short __uint16_t

    ctypedef int __int32_t

    ctypedef unsigned int __uint32_t

    ctypedef long __int64_t

    ctypedef unsigned long __uint64_t

    ctypedef long __quad_t

    ctypedef unsigned long __u_quad_t

    ctypedef unsigned long __dev_t

    ctypedef unsigned int __uid_t

    ctypedef unsigned int __gid_t

    ctypedef unsigned long __ino_t

    ctypedef unsigned long __ino64_t

    ctypedef unsigned int __mode_t

    ctypedef unsigned long __nlink_t

    ctypedef long __off_t

    ctypedef long __off64_t

    ctypedef int __pid_t

    ctypedef struct __fsid_t:
        int __val[2]


    ctypedef long __clock_t

    ctypedef unsigned long __rlim_t

    ctypedef unsigned long __rlim64_t

    ctypedef unsigned int __id_t

    ctypedef long __time_t

    ctypedef unsigned int __useconds_t

    ctypedef long __suseconds_t

    ctypedef int __daddr_t

    ctypedef int __key_t

    ctypedef int __clockid_t

    ctypedef void *__timer_t

    ctypedef long __blksize_t

    ctypedef long __blkcnt_t

    ctypedef long __blkcnt64_t

    ctypedef unsigned long __fsblkcnt_t

    ctypedef unsigned long __fsblkcnt64_t

    ctypedef unsigned long __fsfilcnt_t

    ctypedef unsigned long __fsfilcnt64_t

    ctypedef long __fsword_t

    ctypedef long __ssize_t

    ctypedef long __syscall_slong_t

    ctypedef unsigned long __syscall_ulong_t

    ctypedef __off64_t __loff_t

    ctypedef __quad_t *__qaddr_t

    ctypedef char *__caddr_t

    ctypedef long __intptr_t

    ctypedef unsigned int __socklen_t

    cdef struct _IO_FILE:
        pass

    ctypedef _IO_FILE FILE

    ctypedef _IO_FILE __FILE

    cdef union ____mbstate_t___value:
        unsigned int __wch
        char __wchb[4]

    ctypedef ____mbstate_t___value ____mbstate_t___value_t

    ctypedef struct __mbstate_t:
        int __count
        ____mbstate_t___value_t __value


    ctypedef struct _G_fpos_t:
        __off_t __pos
        __mbstate_t __state


    ctypedef struct _G_fpos64_t:
        __off64_t __pos
        __mbstate_t __state


    cdef struct _IO_jump_t:
        pass

    cdef struct _IO_FILE:
        pass

    ctypedef void _IO_lock_t

    cdef struct _IO_marker:
        _IO_marker *_next
        _IO_FILE *_sbuf
        int _pos

    cdef enum __codecvt_result:
        __codecvt_ok
        __codecvt_partial
        __codecvt_error
        __codecvt_noconv

    cdef struct _IO_FILE:
        int _flags
        char *_IO_read_ptr
        char *_IO_read_end
        char *_IO_read_base
        char *_IO_write_base
        char *_IO_write_ptr
        char *_IO_write_end
        char *_IO_buf_base
        char *_IO_buf_end
        char *_IO_save_base
        char *_IO_backup_base
        char *_IO_save_end
        _IO_marker *_markers
        _IO_FILE *_chain
        int _fileno
        int _flags2
        __off_t _old_offset
        unsigned short _cur_column
        signed char _vtable_offset
        char _shortbuf[1]
        _IO_lock_t *_lock
        __off64_t _offset
        void *__pad1
        void *__pad2
        void *__pad3
        void *__pad4
        int __pad5
        int _mode
        char _unused2

    cdef struct _IO_FILE_plus:
        pass

    _IO_FILE_plus _IO_2_1_stdin_
    _IO_FILE_plus _IO_2_1_stdout_
    _IO_FILE_plus _IO_2_1_stderr_
#    ctypedef __ssize_t (__io_read_fn)(void *, char *, int)
#
#    ctypedef __ssize_t (__io_write_fn)(void *, const char *, int)
#
#    ctypedef int (__io_seek_fn)(void *, __off64_t *, int)
#
#    ctypedef int (__io_close_fn)(void *)

    int __underflow(_IO_FILE *)

    int __uflow(_IO_FILE *)

    int __overflow(_IO_FILE *, int)

    int _IO_getc(_IO_FILE *__fp)

    int _IO_putc(int __c, _IO_FILE *__fp)

    int _IO_feof(_IO_FILE *__fp)

    int _IO_ferror(_IO_FILE *__fp)

    int _IO_peekc_locked(_IO_FILE *__fp)

    void _IO_flockfile(_IO_FILE *)

    void _IO_funlockfile(_IO_FILE *)

    int _IO_ftrylockfile(_IO_FILE *)

    int _IO_vfscanf(_IO_FILE *, const char *, int __gnuc_va_list, int *)

    int _IO_vfprintf(_IO_FILE *, const char *, int __gnuc_va_list)

    __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t)

    int _IO_sgetn(_IO_FILE *, void *, int size_t)

    __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int)

    __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int)

    void _IO_free_backup_area(_IO_FILE *)

    ctypedef int va_list

    ctypedef __off_t off_t

    ctypedef __ssize_t ssize_t

    ctypedef _G_fpos_t fpos_t

    _IO_FILE *stdin
    _IO_FILE *stdout
    _IO_FILE *stderr
    int remove(const char *__filename)

    int rename(const char *__old, const char *__new)

    int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)

    FILE *tmpfile()

    char *tmpnam(char *__s)

    char *tmpnam_r(char *__s)

    char *tempnam(const char *__dir, const char *__pfx)

    int fclose(FILE *__stream)

    int fflush(FILE *__stream)

    int fflush_unlocked(FILE *__stream)

    FILE *fopen(const char *__filename, const char *__modes)

    FILE *freopen(const char *__filename, const char *__modes, FILE *__stream)

    FILE *fdopen(int __fd, const char *__modes)

    FILE *fmemopen(void *__s, int __len, const char *__modes)

    FILE *open_memstream(char **__bufloc, int *__sizeloc)

    void setbuf(FILE *__stream, char *__buf)

    int setvbuf(FILE *__stream, char *__buf, int __modes, int __n)

    void setbuffer(FILE *__stream, char *__buf, int __size)

    void setlinebuf(FILE *__stream)

    int fprintf(FILE *__stream, const char *__format)

    int printf(const char *__format)

    int sprintf(char *__s, const char *__format)

    int vdprintf(int __fd, const char *__fmt, int __arg)

    int dprintf(int __fd, const char *__fmt)

    int fscanf(FILE *__stream, const char *__format)

    int scanf(const char *__format)

    int sscanf(const char *__s, const char *__format)

    int fscanf(FILE *__stream, const char *__format)

    int scanf(const char *__format)

    int sscanf(const char *__s, const char *__format)

    int fgetc(FILE *__stream)

    int getc(FILE *__stream)

    int getchar()

    int getc_unlocked(FILE *__stream)

    int getchar_unlocked()

    int fgetc_unlocked(FILE *__stream)

    int fputc(int __c, FILE *__stream)

    int putc(int __c, FILE *__stream)

    int putchar(int __c)

    int fputc_unlocked(int __c, FILE *__stream)

    int putc_unlocked(int __c, FILE *__stream)

    int putchar_unlocked(int __c)

    int getw(FILE *__stream)

    int putw(int __w, FILE *__stream)

    char *fgets(char *__s, int __n, FILE *__stream)

    char *gets(char *__s)

    __ssize_t __getdelim(char **__lineptr, int *__n, int __delimiter, FILE *__stream)

    __ssize_t getdelim(char **__lineptr, int *__n, int __delimiter, FILE *__stream)

    __ssize_t getline(char **__lineptr, int *__n, FILE *__stream)

    int fputs(const char *__s, FILE *__stream)

    int puts(const char *__s)

    int ungetc(int __c, FILE *__stream)

    int fread(void *__ptr, int __size, int __n, FILE *__stream)

    int fwrite(const void *__ptr, int __size, int __n, FILE *__s)

    int fread_unlocked(void *__ptr, int __size, int __n, FILE *__stream)

    int fwrite_unlocked(const void *__ptr, int __size, int __n, FILE *__stream)

    int fseek(FILE *__stream, long __off, int __whence)

    long ftell(FILE *__stream)

    void rewind(FILE *__stream)

    int fseeko(FILE *__stream, __off_t __off, int __whence)

    __off_t ftello(FILE *__stream)

    int fgetpos(FILE *__stream, fpos_t *__pos)

    int fsetpos(FILE *__stream, const fpos_t *__pos)

    void clearerr(FILE *__stream)

    int feof(FILE *__stream)

    int ferror(FILE *__stream)

    void clearerr_unlocked(FILE *__stream)

    int feof_unlocked(FILE *__stream)

    int ferror_unlocked(FILE *__stream)

    void perror(const char *__s)

    int sys_nerr
#    unexposed_type sys_errlist
    int fileno(FILE *__stream)

    int fileno_unlocked(FILE *__stream)

    FILE *popen(const char *__command, const char *__modes)

    int pclose(FILE *__stream)

    char *ctermid(char *__s)

    void flockfile(FILE *__stream)

    int ftrylockfile(FILE *__stream)

    void funlockfile(FILE *__stream)


    cdef struct stat:
        pass

    ctypedef stat STRUCT_STAT

#    cdef struct DateTime:
#        int mode
#        int from
#        int to
#        int fracsec
#        int year
#        int month
#        int day
#        int hour
#        int minute
#        double second
#        int positive
#        int tz

    int datetime_is_between(int x, int a, int b)

#    int datetime_change_from_to(DateTime *dt, int from, int to, int round)
#
#    void datetime_copy(DateTime *src, const DateTime *dst)
#
#    int datetime_difference(const DateTime *a, const DateTime *b, DateTime *result)

    int datetime_error(int code, char *msg)

    int datetime_error_code()

    char *datetime_error_msg()

    void datetime_clear_error()

#    int datetime_format(const DateTime *dt, char *buf)
#
#    int datetime_increment(DateTime *src, DateTime *incr)

#    int datetime_is_valid_increment(const DateTime *src, const DateTime *incr)

#    int datetime_check_increment(const DateTime *src, const DateTime *incr)

#    int datetime_get_increment_type(const DateTime *dt, int *mode, int *from, int *to, int *fracsec)
#
#    int datetime_set_increment_type(const DateTime *src, DateTime *incr)

    int datetime_get_local_timezone(int *minutes)

#    void datetime_get_local_time(DateTime *dt)

    int datetime_days_in_month(int year, int month, int ad)

    int datetime_is_leap_year(int year, int ad)

    int datetime_days_in_year(int year, int ad)

#    int datetime_is_same(const DateTime *src, const DateTime *dst)

#    int datetime_scan(DateTime *dt, const char *buf)

#    int datetime_is_positive(const DateTime *dt)
#
#    int datetime_is_negative(const DateTime *dt)
#
#    void datetime_set_positive(DateTime *dt)
#
#    void datetime_set_negative(DateTime *dt)
#
#    void datetime_invert_sign(DateTime *dt)

#    int datetime_set_type(DateTime *dt, int mode, int from, int to, int fracsec)

#    int datetime_get_type(const DateTime *dt, int *mode, int *from, int *to, int *fracsec)

#    int datetime_is_valid_type(const DateTime *dt)
#
#    int datetime_check_type(const DateTime *dt)

    int datetime_in_interval_year_month(int x)

    int datetime_in_interval_day_second(int x)

#    int datetime_is_absolute(const DateTime *dt)
#
#    int datetime_is_relative(const DateTime *dt)
#
#    int datetime_check_timezone(const DateTime *dt, int minutes)
#
#    int datetime_get_timezone(const DateTime *dt, int *minutes)
#
#    int datetime_set_timezone(DateTime *dt, int minutes)
#
#    int datetime_unset_timezone(DateTime *dt)
#
#    int datetime_is_valid_timezone(int minutes)
#
#    int datetime_change_timezone(DateTime *dt, int minutes)
#
#    int datetime_change_to_utc(DateTime *dt)
#
#    void datetime_decompose_timezone(int tz, int *hours, int *minutes)
#
#    int datetime_check_year(const DateTime *dt, int year)
#
#    int datetime_check_month(const DateTime *dt, int month)
#
#    int datetime_check_day(const DateTime *dt, int day)
#
#    int datetime_check_hour(const DateTime *dt, int hour)
#
#    int datetime_check_minute(const DateTime *dt, int minute)
#
#    int datetime_check_second(const DateTime *dt, double second)
#
#    int datetime_check_fracsec(const DateTime *dt, int fracsec)
#
#    int datetime_get_year(const DateTime *dt, int *year)
#
#    int datetime_set_year(DateTime *dt, int year)
#
#    int datetime_get_month(const DateTime *dt, int *month)
#
#    int datetime_set_month(DateTime *dt, int month)
#
#    int datetime_get_day(const DateTime *dt, int *day)
#
#    int datetime_set_day(DateTime *dt, int day)
#
#    int datetime_get_hour(const DateTime *dt, int *hour)
#
#    int datetime_set_hour(DateTime *dt, int hour)
#
#    int datetime_get_minute(const DateTime *dt, int *minute)
#
#    int datetime_set_minute(DateTime *dt, int minute)
#
#    int datetime_get_second(const DateTime *dt, double *second)
#
#    int datetime_set_second(DateTime *dt, double second)
#
#    int datetime_get_fracsec(const DateTime *dt, int *fracsec)
#
#    int datetime_set_fracsec(DateTime *dt, int fracsec)

    const char *GRASS_copyright
    ctypedef enum STD_OPT:
        G_OPT_UNDEFINED
        G_OPT_DB_SQL
        G_OPT_DB_WHERE
        G_OPT_DB_TABLE
        G_OPT_DB_DRIVER
        G_OPT_DB_DATABASE
        G_OPT_DB_SCHEMA
        G_OPT_DB_COLUMN
        G_OPT_DB_COLUMNS
        G_OPT_DB_KEYCOLUMN
        G_OPT_I_GROUP
        G_OPT_I_SUBGROUP
        G_OPT_R_INPUT
        G_OPT_R_INPUTS
        G_OPT_R_OUTPUT
        G_OPT_R_MAP
        G_OPT_R_MAPS
        G_OPT_R_BASE
        G_OPT_R_COVER
        G_OPT_R_ELEV
        G_OPT_R_ELEVS
        G_OPT_R3_INPUT
        G_OPT_R3_INPUTS
        G_OPT_R3_OUTPUT
        G_OPT_R3_MAP
        G_OPT_R3_MAPS
        G_OPT_R3_TYPE
        G_OPT_R3_PRECISION
        G_OPT_R3_TILE_DIMENSION
        G_OPT_R3_COMPRESSION
        G_OPT_V_INPUT
        G_OPT_V_INPUTS
        G_OPT_V_OUTPUT
        G_OPT_V_MAP
        G_OPT_V_MAPS
        G_OPT_V_TYPE
        G_OPT_V3_TYPE
        G_OPT_V_FIELD
        G_OPT_V_FIELD_ALL
        G_OPT_V_CAT
        G_OPT_V_CATS
        G_OPT_V_ID
        G_OPT_V_IDS
        G_OPT_F_INPUT
        G_OPT_F_OUTPUT
        G_OPT_F_SEP
        G_OPT_C_FG
        G_OPT_C_BG
        G_OPT_M_UNITS
        G_OPT_M_DATATYPE
        G_OPT_M_MAPSET
        G_OPT_M_COORDS
        G_OPT_M_COLR
        G_OPT_M_DIR
        G_OPT_STDS_INPUT
        G_OPT_STDS_INPUTS
        G_OPT_STDS_OUTPUT
        G_OPT_STRDS_INPUT
        G_OPT_STRDS_INPUTS
        G_OPT_STRDS_OUTPUT
        G_OPT_STR3DS_INPUT
        G_OPT_STR3DS_INPUTS
        G_OPT_STR3DS_OUTPUT
        G_OPT_STVDS_INPUT
        G_OPT_STVDS_INPUTS
        G_OPT_STVDS_OUTPUT
        G_OPT_MAP_INPUT
        G_OPT_MAP_INPUTS
        G_OPT_STDS_TYPE
        G_OPT_MAP_TYPE
        G_OPT_T_TYPE
        G_OPT_T_WHERE
        G_OPT_T_SAMPLE


    ctypedef enum STD_FLG:
        G_FLG_UNDEFINED
        G_FLG_V_TABLE
        G_FLG_V_TOPO


    cdef enum:
        G_ELEMENT_RASTER
        G_ELEMENT_RASTER3D
        G_ELEMENT_VECTOR
        G_ELEMENT_OLDVECTOR
        G_ELEMENT_ASCIIVECTOR
        G_ELEMENT_ICON
        G_ELEMENT_LABEL
        G_ELEMENT_SITE
        G_ELEMENT_REGION
        G_ELEMENT_REGION3D
        G_ELEMENT_GROUP
        G_ELEMENT_3DVIEW

    cdef struct Cell_head:
        int format
        int compressed
        int rows
        int rows3
        int cols
        int cols3
        int depths
        int proj
        int zone
        double ew_res
        double ew_res3
        double ns_res
        double ns_res3
        double tb_res
        double north
        double south
        double east
        double west
        double top
        double bottom

    cdef struct G_3dview:
        char pgm_id[40]
        float from_to[2][3]
        float fov
        float twist
        float exag
        int mesh_freq
        int poly_freq
        int display_type
        int lightson
        int dozero
        int colorgrid
        int shading
        int fringe
        int surfonly
        int doavg
        char grid_col[40]
        char bg_col[40]
        char other_col[40]
        float lightpos[4]
        float lightcol[3]
        float ambient
        float shine
        Cell_head vwin

    cdef struct Key_Value:
        int nitems
        int nalloc
        char **key
        char **value

#    cdef struct Option:
#        const char *key
#        int type
#        int required
#        int multiple
#        const char *options
#        const char **opts
#        const char *key_desc
#        const char *label
#        const char *description
#        const char *descriptions
#        const char **descs
#        char *answer
#        const char *def
#        char **answers
#        Option *next_opt
#        const char *gisprompt
#        const char *guisection
#        const char *guidependency
#        int (*checker)(const char *)
#        int count

    cdef struct Flag:
        char key
        char answer
        char suppress_required
        const char *label
        const char *description
        const char *guisection
        Flag *next_flag

    cdef struct GModule:
        const char *label
        const char *description
        const char **keywords
        int overwrite
        int verbose

#    cdef struct TimeStamp:
#        DateTime dt[2]
#        int count

    cdef struct Counter:
        int value

    cdef struct Popen:
        FILE *fp
        int pid

    ctypedef int CELL

    ctypedef double DCELL

    ctypedef float FCELL

    cdef struct _Color_Value_:
        DCELL value
        unsigned char red
        unsigned char grn
        unsigned char blu

    cdef struct _Color_Rule_:
        _Color_Value_ low
        _Color_Value_ high
        _Color_Rule_ *next
        _Color_Rule_ *prev

    cdef struct ___Color_Info__lookup:
        unsigned char *red
        unsigned char *grn
        unsigned char *blu
        unsigned char *set
        int nalloc
        int active

    ctypedef ___Color_Info__lookup ___Color_Info__lookup_t

    cdef struct ___Color_Info__fp_lookup:
        DCELL *vals
        _Color_Rule_ **rules
        int nalloc
        int active

    ctypedef ___Color_Info__fp_lookup ___Color_Info__fp_lookup_t

    cdef struct _Color_Info_:
        _Color_Rule_ *rules
        int n_rules
        ___Color_Info__lookup_t lookup
        ___Color_Info__fp_lookup_t fp_lookup
        DCELL min
        DCELL max

    cdef struct Colors:
        int version
        DCELL shift
        int invert
        int is_float
        int null_set
        unsigned char null_red
        unsigned char null_grn
        unsigned char null_blu
        int undef_set
        unsigned char undef_red
        unsigned char undef_grn
        unsigned char undef_blu
        _Color_Info_ fixed
        _Color_Info_ modular
        DCELL cmin
        DCELL cmax
        int organizing

    cdef struct ilist:
        int *value
        int n_values
        int alloc_values

    ctypedef __u_char u_char

    ctypedef __u_short u_short

    ctypedef __u_int u_int

    ctypedef __u_long u_long

    ctypedef __quad_t quad_t

    ctypedef __u_quad_t u_quad_t

    ctypedef __fsid_t fsid_t

    ctypedef __loff_t loff_t

    ctypedef __ino_t ino_t

    ctypedef __dev_t dev_t

    ctypedef __gid_t gid_t

    ctypedef __mode_t mode_t

    ctypedef __nlink_t nlink_t

    ctypedef __uid_t uid_t

    ctypedef __pid_t pid_t

    ctypedef __id_t id_t

    ctypedef __daddr_t daddr_t

    ctypedef __caddr_t caddr_t

    ctypedef __key_t key_t

    ctypedef __clock_t clock_t

    ctypedef __time_t time_t

    ctypedef __clockid_t clockid_t

    ctypedef __timer_t timer_t

    ctypedef unsigned long ulong

    ctypedef unsigned short ushort

    ctypedef unsigned int uint

    ctypedef signed char int8_t

    ctypedef short int16_t

    ctypedef int int32_t

    ctypedef long int64_t

    ctypedef unsigned char u_int8_t

    ctypedef unsigned short u_int16_t

    ctypedef unsigned int u_int32_t

    ctypedef unsigned long u_int64_t

    ctypedef long register_t

    ctypedef int __sig_atomic_t

    ctypedef struct __sigset_t:
        unsigned long __val[16]


    ctypedef __sigset_t sigset_t

    cdef struct timespec:
        __time_t tv_sec
        __syscall_slong_t tv_nsec

    cdef struct timeval:
        __time_t tv_sec
        __suseconds_t tv_usec

    ctypedef __suseconds_t suseconds_t

    ctypedef long __fd_mask

    ctypedef struct fd_set:
        __fd_mask __fds_bits[16]


    ctypedef __fd_mask fd_mask

    int select(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, timeval *__timeout)

    int pselect(int __nfds, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, timespec *__timeout, const __sigset_t *__sigmask)

    unsigned int gnu_dev_major(unsigned long long __dev)

    unsigned int gnu_dev_minor(unsigned long long __dev)

    unsigned long long gnu_dev_makedev(unsigned int __major, unsigned int __minor)

    ctypedef __blksize_t blksize_t

    ctypedef __blkcnt_t blkcnt_t

    ctypedef __fsblkcnt_t fsblkcnt_t

    ctypedef __fsfilcnt_t fsfilcnt_t

    ctypedef unsigned long pthread_t

    cdef union pthread_attr_t:
        char __size[56]
        long __align

    cdef struct __pthread_internal_list:
        __pthread_internal_list *__prev
        __pthread_internal_list *__next

    ctypedef __pthread_internal_list __pthread_list_t

    cdef struct __pthread_mutex_t___pthread_mutex_s:
        int __lock
        unsigned int __count
        int __owner
        unsigned int __nusers
        int __kind
        int __spins
        __pthread_list_t __list

    ctypedef __pthread_mutex_t___pthread_mutex_s __pthread_mutex_t___pthread_mutex_s_t

    ctypedef union pthread_mutex_t:
        __pthread_mutex_t___pthread_mutex_s_t __data
        char __size[40]
        long __align


    ctypedef union pthread_mutexattr_t:
        char __size[4]
        int __align


    cdef struct __pthread_cond_t___data:
        int __lock
        unsigned int __futex
        unsigned long long __total_seq
        unsigned long long __wakeup_seq
        unsigned long long __woken_seq
        void *__mutex
        unsigned int __nwaiters
        unsigned int __broadcast_seq

    ctypedef __pthread_cond_t___data __pthread_cond_t___data_t

    ctypedef union pthread_cond_t:
        __pthread_cond_t___data_t __data
        char __size[48]
        long long __align


    ctypedef union pthread_condattr_t:
        char __size[4]
        int __align


    ctypedef unsigned int pthread_key_t

    ctypedef int pthread_once_t

    cdef struct __pthread_rwlock_t___data:
        int __lock
        unsigned int __nr_readers
        unsigned int __readers_wakeup
        unsigned int __writer_wakeup
        unsigned int __nr_readers_queued
        unsigned int __nr_writers_queued
        int __writer
        int __shared
        unsigned long __pad1
        unsigned long __pad2
        unsigned int __flags

    ctypedef __pthread_rwlock_t___data __pthread_rwlock_t___data_t

    ctypedef union pthread_rwlock_t:
        __pthread_rwlock_t___data_t __data
        char __size[56]
        long __align


    ctypedef union pthread_rwlockattr_t:
        char __size[8]
        long __align


    ctypedef int pthread_spinlock_t

    ctypedef union pthread_barrier_t:
        char __size[32]
        long __align


    ctypedef union pthread_barrierattr_t:
        char __size[4]
        int __align


    int __sigismember(const __sigset_t *, int)

    int __sigaddset(__sigset_t *, int)

    int __sigdelset(__sigset_t *, int)

    ctypedef __sig_atomic_t sig_atomic_t

    cdef union sigval:
        int sival_int
        void *sival_ptr

    ctypedef sigval sigval_t

    ctypedef __clock_t __sigchld_clock_t

    cdef struct ____siginfo_t__sifields__kill:
        __pid_t si_pid
        __uid_t si_uid

    ctypedef ____siginfo_t__sifields__kill ____siginfo_t__sifields__kill_t

    cdef struct ____siginfo_t__sifields__timer:
        int si_tid
        int si_overrun
        sigval_t si_sigval

    ctypedef ____siginfo_t__sifields__timer ____siginfo_t__sifields__timer_t

    cdef struct ____siginfo_t__sifields__rt:
        __pid_t si_pid
        __uid_t si_uid
        sigval_t si_sigval

    ctypedef ____siginfo_t__sifields__rt ____siginfo_t__sifields__rt_t

    cdef struct ____siginfo_t__sifields__sigchld:
        __pid_t si_pid
        __uid_t si_uid
        int si_status
        __sigchld_clock_t si_utime
        __sigchld_clock_t si_stime

    ctypedef ____siginfo_t__sifields__sigchld ____siginfo_t__sifields__sigchld_t

    cdef struct ____siginfo_t__sifields__sigfault:
        void *si_addr

    ctypedef ____siginfo_t__sifields__sigfault ____siginfo_t__sifields__sigfault_t

    cdef struct ____siginfo_t__sifields__sigpoll:
        long si_band
        int si_fd

    ctypedef ____siginfo_t__sifields__sigpoll ____siginfo_t__sifields__sigpoll_t

    cdef struct ____siginfo_t__sifields__sigsys:
        void *_call_addr
        int _syscall
        unsigned int _arch

    ctypedef ____siginfo_t__sifields__sigsys ____siginfo_t__sifields__sigsys_t

    cdef union __siginfo_t__sifields:
        int _pad[28]
        ____siginfo_t__sifields__kill_t _kill
        ____siginfo_t__sifields__timer_t _timer
        ____siginfo_t__sifields__rt_t _rt
        ____siginfo_t__sifields__sigchld_t _sigchld
        ____siginfo_t__sifields__sigfault_t _sigfault
        ____siginfo_t__sifields__sigpoll_t _sigpoll
        ____siginfo_t__sifields__sigsys_t _sigsys

    ctypedef __siginfo_t__sifields __siginfo_t__sifields_t

    ctypedef struct siginfo_t:
        int si_signo
        int si_errno
        int si_code
        __siginfo_t__sifields_t _sifields


    cdef enum:
        SI_ASYNCNL
        SI_TKILL
        SI_SIGIO
        SI_ASYNCIO
        SI_MESGQ
        SI_TIMER
        SI_QUEUE
        SI_USER
        SI_KERNEL

    cdef enum:
        ILL_ILLOPC
        ILL_ILLOPN
        ILL_ILLADR
        ILL_ILLTRP
        ILL_PRVOPC
        ILL_PRVREG
        ILL_COPROC
        ILL_BADSTK

    cdef enum:
        FPE_INTDIV
        FPE_INTOVF
        FPE_FLTDIV
        FPE_FLTOVF
        FPE_FLTUND
        FPE_FLTRES
        FPE_FLTINV
        FPE_FLTSUB

    cdef enum:
        SEGV_MAPERR
        SEGV_ACCERR

    cdef enum:
        BUS_ADRALN
        BUS_ADRERR
        BUS_OBJERR

    cdef enum:
        TRAP_BRKPT
        TRAP_TRACE

    cdef enum:
        CLD_EXITED
        CLD_KILLED
        CLD_DUMPED
        CLD_TRAPPED
        CLD_STOPPED
        CLD_CONTINUED

    cdef enum:
        POLL_IN
        POLL_OUT
        POLL_MSG
        POLL_ERR
        POLL_PRI
        POLL_HUP

    cdef struct ____sigevent__sigev_un__sigev_thread:
        void (*_function)(sigval)
        pthread_attr_t *_attribute

    ctypedef ____sigevent__sigev_un__sigev_thread ____sigevent__sigev_un__sigev_thread_t

    cdef union __sigevent__sigev_un:
        int _pad[12]
        __pid_t _tid
        ____sigevent__sigev_un__sigev_thread_t _sigev_thread

    ctypedef __sigevent__sigev_un __sigevent__sigev_un_t

    cdef struct sigevent:
        sigval_t sigev_value
        int sigev_signo
        int sigev_notify
        __sigevent__sigev_un_t _sigev_un

    ctypedef sigevent sigevent_t

    cdef enum:
        SIGEV_SIGNAL
        SIGEV_NONE
        SIGEV_THREAD
        SIGEV_THREAD_ID

    ctypedef void (*__sighandler_t)(int)

    __sighandler_t __sysv_signal(int __sig, __sighandler_t __handler)

    __sighandler_t signal(int __sig, __sighandler_t __handler)

    int kill(__pid_t __pid, int __sig)

    int killpg(__pid_t __pgrp, int __sig)

#    int raise(int __sig)

    __sighandler_t ssignal(int __sig, __sighandler_t __handler)

    int gsignal(int __sig)

    void psignal(int __sig, const char *__s)

    void psiginfo(const siginfo_t *__pinfo, const char *__s)

    int __sigpause(int __sig_or_mask, int __is_sig)

    int sigblock(int __mask)

    int sigsetmask(int __mask)

    int siggetmask()

    ctypedef __sighandler_t sig_t

    int sigemptyset(sigset_t *__set)

    int sigfillset(sigset_t *__set)

    int sigaddset(sigset_t *__set, int __signo)

    int sigdelset(sigset_t *__set, int __signo)

    int sigismember(const sigset_t *__set, int __signo)

    cdef union __sigaction___sigaction_handler:
        __sighandler_t sa_handler
        void (*sa_sigaction)(int, siginfo_t *, void *)

    ctypedef __sigaction___sigaction_handler __sigaction___sigaction_handler_t

    cdef struct sigaction:
        __sigaction___sigaction_handler_t __sigaction_handler
        __sigset_t sa_mask
        int sa_flags
        void (*sa_restorer)()

    int sigprocmask(int __how, const sigset_t *__set, sigset_t *__oset)

    int sigsuspend(const sigset_t *__set)

#    int sigaction(int __sig, sigaction *__act, sigaction *__oact)

    int sigpending(sigset_t *__set)

    int sigwait(const sigset_t *__set, int *__sig)

    int sigwaitinfo(const sigset_t *__set, siginfo_t *__info)

    int sigtimedwait(const sigset_t *__set, siginfo_t *__info, timespec *__timeout)

    int sigqueue(__pid_t __pid, int __sig, sigval __val)

    const char *const _sys_siglist[65]
    const char *const sys_siglist[65]
    cdef struct sigvec:
        __sighandler_t sv_handler
        int sv_mask
        int sv_flags

#    int sigvec(int __sig, sigvec *__vec, sigvec *__ovec)

    cdef struct _fpx_sw_bytes:
        __uint32_t magic1
        __uint32_t extended_size
        __uint64_t xstate_bv
        __uint32_t xstate_size
        __uint32_t padding[7]

    cdef struct _fpreg:
        unsigned short significand[4]
        unsigned short exponent

    cdef struct _fpxreg:
        unsigned short significand[4]
        unsigned short exponent
        unsigned short padding[3]

    cdef struct _xmmreg:
        __uint32_t element[4]

    cdef struct _fpstate:
        __uint16_t cwd
        __uint16_t swd
        __uint16_t ftw
        __uint16_t fop
        __uint64_t rip
        __uint64_t rdp
        __uint32_t mxcsr
        __uint32_t mxcr_mask
        _fpxreg _st[8]
        _xmmreg _xmm[16]
        __uint32_t padding[24]

    cdef union __sigcontext_:
        _fpstate *fpstate
        __uint64_t __fpstate_word

    ctypedef __sigcontext_ __sigcontext__t

    cdef struct sigcontext:
        __uint64_t r8
        __uint64_t r9
        __uint64_t r10
        __uint64_t r11
        __uint64_t r12
        __uint64_t r13
        __uint64_t r14
        __uint64_t r15
        __uint64_t rdi
        __uint64_t rsi
        __uint64_t rbp
        __uint64_t rbx
        __uint64_t rdx
        __uint64_t rax
        __uint64_t rcx
        __uint64_t rsp
        __uint64_t rip
        __uint64_t eflags
        unsigned short cs
        unsigned short gs
        unsigned short fs
        unsigned short __pad0
        __uint64_t err
        __uint64_t trapno
        __uint64_t oldmask
        __uint64_t cr2
        __uint64_t __reserved1[8]

    cdef struct _xsave_hdr:
        __uint64_t xstate_bv
        __uint64_t reserved1[2]
        __uint64_t reserved2[5]

    cdef struct _ymmh_state:
        __uint32_t ymmh_space[64]

    cdef struct _xstate:
        _fpstate fpstate
        _xsave_hdr xstate_hdr
        _ymmh_state ymmh

    int sigreturn(sigcontext *__scp)

    int siginterrupt(int __sig, int __interrupt)

    cdef struct sigstack:
        void *ss_sp
        int ss_onstack

    cdef enum:
        SS_ONSTACK
        SS_DISABLE

    cdef struct sigaltstack:
        void *ss_sp
        int ss_flags
        int ss_size

    ctypedef sigaltstack stack_t

    ctypedef long long greg_t

    ctypedef greg_t gregset_t[23]

    cdef struct _libc_fpxreg:
        unsigned short significand[4]
        unsigned short exponent
        unsigned short padding[3]

    cdef struct _libc_xmmreg:
        __uint32_t element[4]

    cdef struct _libc_fpstate:
        __uint16_t cwd
        __uint16_t swd
        __uint16_t ftw
        __uint16_t fop
        __uint64_t rip
        __uint64_t rdp
        __uint32_t mxcsr
        __uint32_t mxcr_mask
        _libc_fpxreg _st[8]
        _libc_xmmreg _xmm[16]
        __uint32_t padding[24]

    ctypedef _libc_fpstate *fpregset_t

    ctypedef struct mcontext_t:
        gregset_t gregs
        fpregset_t fpregs
        unsigned long long __reserved1[8]


    cdef struct ucontext:
        unsigned long uc_flags
        ucontext *uc_link
        stack_t uc_stack
        mcontext_t uc_mcontext
        __sigset_t uc_sigmask
        _libc_fpstate __fpregs_mem

    ctypedef ucontext ucontext_t

#    int sigstack(sigstack *__ss, sigstack *__oss)

#    int sigaltstack(sigaltstack *__ss, sigaltstack *__oss)

    int pthread_sigmask(int __how, const __sigset_t *__newmask, __sigset_t *__oldmask)

    int pthread_kill(pthread_t __threadid, int __signo)

    int __libc_current_sigrtmin()

    int __libc_current_sigrtmax()

    void G_adjust_Cell_head(Cell_head *, int, int)

    void G_adjust_Cell_head3(Cell_head *, int, int, int)

    void *G__malloc(const char *, int, int size_t)

    void *G__calloc(const char *, int, int size_t, int)

    void *G__realloc(const char *, int, void *, int size_t)

    void G_free(void *)

    int G_begin_cell_area_calculations()

    double G_area_of_cell_at_row(int)

    int G_begin_polygon_area_calculations()

    double G_area_of_polygon(const double *, const double *, int)

    void G_begin_zone_area_on_ellipsoid(double, double, double)

    double G_darea0_on_ellipsoid(double)

    double G_area_for_zone_on_ellipsoid(double, double)

    void G_begin_ellipsoid_polygon_area(double, double)

    double G_ellipsoid_polygon_area(const double *, const double *, int)

    double G_planimetric_polygon_area(const double *, const double *, int)

    void G_begin_zone_area_on_sphere(double, double)

    double G_darea0_on_sphere(double)

    double G_area_for_zone_on_sphere(double, double)

    void G_ascii_check(char *)

    int G_vasprintf(char **, const char *, va_list)

    int G_asprintf(char **, const char *)

    int G_rasprintf(char **, int *, const char *)

    char *G_basename(char *, const char *)

    void G_bresenham_line(int, int, int, int, int (*)(int, int))

    void G_clicker()

    char *G_color_rules_options()

    char *G_color_rules_descriptions()

    void G_list_color_rules(FILE *)

    int G_find_color_rule(const char *)

    int G_num_standard_colors()

    int G_insert_commas(char *)

    void G_remove_commas(char *)

    int G_recursive_copy(const char *, const char *)

    int G_copy_file(const char *, const char *)

    int G_is_initialized(int *)

    void G_initialize_done(int *)

    void G_init_counter(Counter *, int)

    int G_counter_next(Counter *)

    const char *G_date()

    int G_get_datum_by_name(const char *)

    const char *G_datum_name(int)

    const char *G_datum_description(int)

    const char *G_datum_ellipsoid(int)

    int G_get_datumparams_from_projinfo(Key_Value *, char *, char *)

    void G_read_datum_table()

    void G_init_debug()

    int G_debug(int, const char *)

    int G_begin_distance_calculations()

    double G_distance(double, double, double, double)

    double G_distance_between_line_segments(double, double, double, double, double, double, double, double)

    double G_distance_point_to_line_segment(double, double, double, double, double, double)

    void G_done_msg(const char *)

    int G_is_little_endian()

    void G_init_env()

    const char *G_getenv(const char *)

    const char *G_getenv2(const char *, int)

    const char *G__getenv(const char *)

    const char *G__getenv2(const char *, int)

    void G_setenv(const char *, const char *)

    void G_setenv2(const char *, const char *, int)

    void G__setenv(const char *, const char *)

    void G__setenv2(const char *, const char *, int)

    void G_unsetenv(const char *)

    void G_unsetenv2(const char *, int)

    void G__write_env()

    const char *G__env_name(int)

    void G__read_env()

    void G_set_gisrc_mode(int)

    int G_get_gisrc_mode()

    void G__create_alt_env()

    void G__switch_env()

    int G_info_format()

    void G_message(const char *)

    void G_verbose_message(const char *)

    void G_important_message(const char *)

    void G_fatal_error(const char *)

    void G_warning(const char *)

    int G_suppress_warnings(int)

    int G_sleep_on_error(int)

    void G_set_error_routine(int (*)(const char *, int))

    void G_unset_error_routine()

    void G_init_logging()

    char *G_file_name(char *, const char *, const char *, const char *)

    char *G_file_name_misc(char *, const char *, const char *, const char *, const char *)

    const char *G_find_file(const char *, char *, const char *)

    const char *G_find_file2(const char *, const char *, const char *)

    const char *G_find_file_misc(const char *, const char *, char *, const char *)

    const char *G_find_file2_misc(const char *, const char *, const char *, const char *)

    char *G_find_etc(const char *)

    const char *G_find_raster(char *, const char *)

    const char *G_find_raster2(const char *, const char *)

    const char *G_find_raster3d(const char *, const char *)

    const char *G_find_vector(char *, const char *)

    const char *G_find_vector2(const char *, const char *)

    int G_zlib_compress(const unsigned char *, int, unsigned char *, int)

    int G_zlib_expand(const unsigned char *, int, unsigned char *, int)

    int G_zlib_write(int, const unsigned char *, int)

    int G_zlib_read(int, int, unsigned char *, int)

    int G_zlib_write_noCompress(int, const unsigned char *, int)

    int G_begin_geodesic_equation(double, double, double, double)

    double G_geodesic_lat_from_lon(double)

    void G_begin_geodesic_distance(double, double)

    void G_set_geodesic_distance_lat1(double)

    void G_set_geodesic_distance_lat2(double)

    double G_geodesic_distance_lon_to_lon(double, double)

    double G_geodesic_distance(double, double, double, double)

    int G_get_ellipsoid_parameters(double *, double *)

    int G_get_spheroid_by_name(const char *, double *, double *, double *)

    int G_get_ellipsoid_by_name(const char *, double *, double *)

    const char *G_ellipsoid_name(int)

    const char *G_ellipsoid_description(int)

    int G_read_ellipsoid_table(int)

    Key_Value *G_get_projunits()

    Key_Value *G_get_projinfo()

    void G_get_window(Cell_head *)

    void G_get_default_window(Cell_head *)

    void G__get_window(Cell_head *, const char *, const char *, const char *)

    int G_getl(char *, int, FILE *)

    int G_getl2(char *, int, FILE *)

    const char *G_gisbase()

    const char *G_gisdbase()

    void G__gisinit(const char *, const char *)

    void G__no_gisinit(const char *)

    void G__check_gisinit()

    void G_init_all()

    void G_add_error_handler(void (*)(void *), void *)

    void G_remove_error_handler(void (*)(void *), void *)

    void G__call_error_handlers()

    const char *G_home()

    const char *G__home()

    void G_init_ilist(ilist *)

    void G_ilist_add(ilist *, int)

    int G_intersect_line_segments(double, double, double, double, double, double, double, double, double *, double *, double *, double *)

    int G_is_gisbase(const char *)

    int G_is_location(const char *)

    int G_is_mapset(const char *)

    Key_Value *G_create_key_value()

    void G_set_key_value(const char *, const char *, Key_Value *)

    const char *G_find_key_value(const char *, Key_Value *)

    void G_free_key_value(Key_Value *)

    int G_fwrite_key_value(FILE *, Key_Value *)

    Key_Value *G_fread_key_value(FILE *)

    void G_write_key_value_file(const char *, Key_Value *)

    Key_Value *G_read_key_value_file(const char *)

    void G_update_key_value_file(const char *, const char *, const char *)

    int G_lookup_key_value_from_file(const char *, const char *, char *, int)

    int G_legal_filename(const char *)

    int G_check_input_output_name(const char *, const char *, int)

    void G_set_distance_to_line_tolerance(double)

    double G_distance2_point_to_line(double, double, double, double, double, double)

    void G_list_element(const char *, const char *, const char *, int (*)(const char *, const char *, const char *))

    char **G_list(int, const char *, const char *, const char *)

    void G_free_list(char **)

    void G_lat_format(double, char *)

    const char *G_lat_format_string()

    void G_lon_format(double, char *)

    const char *G_lon_format_string()

    void G_llres_format(double, char *)

    const char *G_llres_format_string()

    void G_lat_parts(double, int *, int *, double *, char *)

    void G_lon_parts(double, int *, int *, double *, char *)

    int G_lat_scan(const char *, double *)

    int G_lon_scan(const char *, double *)

    int G_llres_scan(const char *, double *)

    const char *G_location()

    char *G_location_path()

    void G_set_ls_filter(int (*)(const char *, void *), void *)

    void G_set_ls_exclude_filter(int (*)(const char *, void *), void *)

    char **G__ls(const char *, int *)

    void G_ls(const char *, FILE *)

    void G_ls_format(char **, int, int, FILE *)

    void *G_ls_regex_filter(const char *, int, int)

    void *G_ls_glob_filter(const char *, int)

    void G_free_ls_filter(void *)

    const char *G__machine_name()

    int G__make_location(const char *, Cell_head *, Key_Value *, Key_Value *, FILE *)

    int G_make_location(const char *, Cell_head *, Key_Value *, Key_Value *, FILE *)

    int G_compare_projections(Key_Value *, Key_Value *, Key_Value *, Key_Value *)

    int G__make_mapset(const char *gisdbase_name, const char *location_name, const char *mapset_name)

    int G_make_mapset(const char *gisdbase_name, const char *location_name, const char *mapset_name)

    char *G_tolcase(char *)

    char *G_toucase(char *)

    const char *G_mapset()

    char *G_mapset_path()

    int G__make_mapset_element(const char *)

    int G__make_mapset_element_misc(const char *, const char *)

    int G__mapset_permissions(const char *)

    int G__mapset_permissions2(const char *, const char *, const char *)

    const char *G__mapset_name(int)

    void G_get_list_of_mapsets()

    void G__create_alt_search_path()

    void G__switch_search_path()

    void G_reset_mapsets()

    char **G_available_mapsets()

    void G_add_mapset_to_search_path(const char *)

    int G_is_mapset_in_search_path(const char *)

    char *G_myname()

    int G_color_values(const char *, float *, float *, float *)

    const char *G_color_name(int)

    void G_newlines_to_spaces(char *)

    int G_name_is_fully_qualified(const char *, char *, char *)

    char *G_fully_qualified_name(const char *, const char *)

    int G_unqualified_name(const char *, const char *, char *, char *)

    int G_open_new(const char *, const char *)

    int G_open_old(const char *, const char *, const char *)

    int G_open_update(const char *, const char *)

    FILE *G_fopen_new(const char *, const char *)

    FILE *G_fopen_old(const char *, const char *, const char *)

    FILE *G_fopen_append(const char *, const char *)

    FILE *G_fopen_modify(const char *, const char *)

    int G_open_new_misc(const char *, const char *, const char *)

    int G_open_old_misc(const char *, const char *, const char *, const char *)

    int G_open_update_misc(const char *, const char *, const char *)

    FILE *G_fopen_new_misc(const char *, const char *, const char *)

    FILE *G_fopen_old_misc(const char *, const char *, const char *, const char *)

    FILE *G_fopen_append_misc(const char *, const char *, const char *)

    FILE *G_fopen_modify_misc(const char *, const char *, const char *)

    int G_check_overwrite(int argc, char **argv)

    FILE *G_open_pager(Popen *)

    void G_close_pager(Popen *)

    FILE *G_open_mail(Popen *)

    void G_close_mail(Popen *)

    void G_disable_interactive()

    GModule *G_define_module()

    Flag *G_define_flag()

#    Option *G_define_option()
#
#    Option *G_define_standard_option(int)

    Flag *G_define_standard_flag(int)

    int G_parser(int, char **)

    void G_usage()

    char *G_recreate_command()

    void G_add_keyword(const char *)

    void G_set_keywords(const char *)

    int G_get_overwrite()

#    char *G_option_to_separator(Option *)

    int G_mkdir(const char *)

    int G_is_dirsep(char)

    int G_is_absolute_path(const char *)

    char *G_convert_dirseps_to_host(char *)

    char *G_convert_dirseps_from_host(char *)

    int G_lstat(const char *, STRUCT_STAT *)

    int G_stat(const char *, STRUCT_STAT *)

    int G_owner(const char *)

    void G_percent(long, long, int)

    void G_percent_reset()

    void G_progress(long, int)

    void G_set_percent_routine(int (*)(int))

    void G_unset_percent_routine()

    void G_popen_clear(Popen *)

    FILE *G_popen_write(Popen *, const char *, const char **)

    FILE *G_popen_read(Popen *, const char *, const char **)

    void G_popen_close(Popen *)

    void G_setup_plot(double, double, double, double, int (*)(int, int), int (*)(int, int))

    void G_setup_fill(int)

    void G_plot_where_xy(double, double, int *, int *)

    void G_plot_where_en(int, int, double *, double *)

    void G_plot_point(double, double)

    void G_plot_line(double, double, double, double)

    void G_plot_line2(double, double, double, double)

    int G_plot_polygon(const double *, const double *, int)

    int G_plot_area(double *const *, double *const *, int *, int)

    void G_plot_fx(double (*)(double), double, double)

    int G_pole_in_polygon(const double *, const double *, int)

    const char *G_program_name()

    void G_set_program_name(const char *)

    int G_projection()

    int G__projection_units(int)

    const char *G__projection_name(int)

    const char *G_database_unit_name(int)

    const char *G_database_projection_name()

    const char *G_database_datum_name()

    const char *G_database_ellipse_name()

    double G_database_units_to_meters_factor()

    int G_put_window(Cell_head *)

    int G__put_window(Cell_head *, const char *, const char *)

    void G_putenv(const char *, const char *)

    double G_meridional_radius_of_curvature(double, double, double)

    double G_transverse_radius_of_curvature(double, double, double)

    double G_radius_of_conformal_tangent_sphere(double, double, double)

    void G__read_Cell_head(FILE *, Cell_head *, int)

    void G__read_Cell_head_array(char **, Cell_head *, int)

    int G_remove(const char *, const char *)

    int G_remove_misc(const char *, const char *, const char *)

    int G_rename_file(const char *, const char *)

    int G_rename(const char *, const char *, const char *)

    int G_begin_rhumbline_equation(double, double, double, double)

    double G_rhumbline_lat_from_lon(double)

    void G_rotate_around_point(double, double, double *, double *, double)

    void G_rotate_around_point_int(int, int, int *, int *, double)

    off_t G_ftell(FILE *)

    void G_fseek(FILE *, off_t, int)

    void G_get_set_window(Cell_head *)

    void G_set_window(Cell_head *)

    void G_unset_window()

    void G_shortest_way(double *, double *)

    void G_sleep(unsigned int)

    int G_snprintf(char *, int size_t, const char *)

    int G_strcasecmp(const char *, const char *)

    int G_strncasecmp(const char *, const char *, int)

    char *G_store(const char *)

    char *G_strchg(char *, char, char)

    char *G_str_replace(const char *, const char *, const char *)

    void G_strip(char *)

    char *G_chop(char *)

    void G_str_to_upper(char *)

    void G_str_to_lower(char *)

    int G_str_to_sql(char *)

    void G_squeeze(char *)

    char *G_strcasestr(const char *, const char *)

    void G_init_tempfile()

    char *G_tempfile()

    char *G__tempfile(int)

    void G__temp_element(char *)

#    void G_init_timestamp(TimeStamp *)

#    void G_set_timestamp(TimeStamp *, DateTime *)
#
#    void G_set_timestamp_range(TimeStamp *, DateTime *, DateTime *)
#
#    int G__read_timestamp(FILE *, TimeStamp *)
#
#    int G__write_timestamp(FILE *, TimeStamp *)
#
#    void G_get_timestamps(TimeStamp *, DateTime *, DateTime *, int *)
#
#    int G_format_timestamp(TimeStamp *, char *)
#
#    int G_scan_timestamp(TimeStamp *, const char *)

    int G_has_raster_timestamp(const char *, const char *)

#    int G_read_raster_timestamp(const char *, const char *, TimeStamp *)
#
#    int G_write_raster_timestamp(const char *, TimeStamp *)

    int G_remove_raster_timestamp(const char *)

    int G_has_vector_timestamp(const char *, const char *, const char *)

#    int G_read_vector_timestamp(const char *, const char *, const char *, TimeStamp *)
#
#    int G_write_vector_timestamp(const char *, const char *, TimeStamp *)

    int G_remove_vector_timestamp(const char *, const char *)

    int G_has_raster3d_timestamp(const char *, const char *)

#    int G_read_raster3d_timestamp(const char *, const char *, TimeStamp *)

    int G_remove_raster3d_timestamp(const char *)

#    int G_write_raster3d_timestamp(const char *, TimeStamp *)

    char **G_tokenize(const char *, const char *)

    char **G_tokenize2(const char *, const char *, const char *)

    int G_number_of_tokens(char **)

    void G_free_tokens(char **)

    void G_trim_decimal(char *)

    double G_units_to_meters_factor(int)

    double G_units_to_meters_factor_sq(int)

    const char *G_get_units_name(int, int, int)

    int G_units(const char *)

    int G_is_units_type_spatial(int)

    int G_is_units_type_temporal(int)

    char *G_rc_path(const char *, const char *)

    int G_verbose()

    int G_verbose_min()

    int G_verbose_std()

    int G_verbose_max()

    int G_set_verbose(int)

    void G_3dview_warning(int)

    int G_get_3dview_defaults(G_3dview *, Cell_head *)

    int G_put_3dview(const char *, const char *, G_3dview *, Cell_head *)

    int G_get_3dview(const char *, const char *, G_3dview *)

    const char *G_whoami()

    void G_adjust_window_to_box(Cell_head *, Cell_head *, int, int)

    void G_format_northing(double, char *, int)

    void G_format_easting(double, char *, int)

    void G_format_resolution(double, char *, int)

    int G_point_in_region(double, double)

    int G_point_in_window(double, double, Cell_head *)

    int G_limit_east(double *, int)

    int G_limit_west(double *, int)

    int G_limit_north(double *, int)

    int G_limit_south(double *, int)

    int G_window_overlap(Cell_head *, double, double, double, double)

    double G_window_percentage_overlap(Cell_head *, double, double, double, double)

    int G_scan_northing(const char *, double *, int)

    int G_scan_easting(const char *, double *, int)

    int G_scan_resolution(const char *, double *, int)

    double G_adjust_east_longitude(double, double)

    double G_adjust_easting(double, Cell_head *)

    void G__init_window()

    void G_begin_execute(void (*func)(void *), void *, void **, int)

    void G_end_execute(void **)

    void G_init_workers()

    void G_finish_workers()

    void G__write_Cell_head(FILE *, Cell_head *, int)

    void G__write_Cell_head3(FILE *, Cell_head *, int)

    void G_write_zeros(int, int size_t)

    void G_xdr_get_int(int *, const void *)

    void G_xdr_put_int(void *, const int *)

    void G_xdr_get_float(float *, const void *)

    void G_xdr_put_float(void *, const float *)

    void G_xdr_get_double(double *, const void *)

    void G_xdr_put_double(void *, const double *)

    void G_zero(void *, int)

    int G_zone()

    ctypedef int RASTER_MAP_TYPE

    ctypedef int INTERP_TYPE

    cdef struct Reclass:
        char *name
        char *mapset
        int type
        int num
        CELL min
        CELL max
        CELL *table

    cdef struct FPReclass_table:
        DCELL dLow
        DCELL dHigh
        DCELL rLow
        DCELL rHigh

    cdef struct FPReclass:
        int defaultDRuleSet
        int defaultRRuleSet
        int infiniteLeftSet
        int infiniteRightSet
        int rRangeSet
        int maxNofRules
        int nofRules
        DCELL defaultDMin
        DCELL defaultDMax
        DCELL defaultRMin
        DCELL defaultRMax
        DCELL infiniteDLeft
        DCELL infiniteDRight
        DCELL infiniteRLeft
        DCELL infiniteRRight
        DCELL dMin
        DCELL dMax
        DCELL rMin
        DCELL rMax
        FPReclass_table *table

    cdef struct Quant_table:
        DCELL dLow
        DCELL dHigh
        CELL cLow
        CELL cHigh

    cdef struct __Quant_fp_lookup:
        DCELL *vals
        Quant_table **rules
        int nalloc
        int active
        DCELL inf_dmin
        DCELL inf_dmax
        CELL inf_min
        CELL inf_max

    ctypedef __Quant_fp_lookup __Quant_fp_lookup_t

    cdef struct Quant:
        int truncate_only
        int round_only
        int defaultDRuleSet
        int defaultCRuleSet
        int infiniteLeftSet
        int infiniteRightSet
        int cRangeSet
        int maxNofRules
        int nofRules
        DCELL defaultDMin
        DCELL defaultDMax
        CELL defaultCMin
        CELL defaultCMax
        DCELL infiniteDLeft
        DCELL infiniteDRight
        CELL infiniteCLeft
        CELL infiniteCRight
        DCELL dMin
        DCELL dMax
        CELL cMin
        CELL cMax
        Quant_table *table
        __Quant_fp_lookup_t fp_lookup

    cdef struct Categories:
        CELL ncats
        CELL num
        char *title
        char *fmt
        float m1
        float a1
        float m2
        float a2
        Quant q
        char **labels
        int *marks
        int nalloc
        int last_marked_rule

    cdef enum History_field:
        HIST_MAPID
        HIST_TITLE
        HIST_MAPSET
        HIST_CREATOR
        HIST_MAPTYPE
        HIST_DATSRC_1
        HIST_DATSRC_2
        HIST_KEYWRD
        HIST_NUM_FIELDS

    cdef struct History:
        char *fields[8]
        int nlines
        char **lines

    cdef struct __Cell_stats_Cell_stats_node:
        int idx
        long *count
        int left
        int right

    ctypedef __Cell_stats_Cell_stats_node __Cell_stats_Cell_stats_node_t

    cdef struct Cell_stats:
        __Cell_stats_Cell_stats_node *node
        int tlen
        int N
        int curp
        long null_data_count
        int curoffset

    cdef struct __Histogram_Histogram_list:
        CELL cat
        long count

    ctypedef __Histogram_Histogram_list __Histogram_Histogram_list_t

    cdef struct Histogram:
        int num
        __Histogram_Histogram_list *list

    cdef struct Range:
        CELL min
        CELL max
        int first_time

    cdef struct FPRange:
        DCELL min
        DCELL max
        int first_time

    cdef struct FP_stats:
        int geometric
        int geom_abs
        int flip
        int count
        DCELL min
        DCELL max
        unsigned long *stats
        unsigned long total

    cdef struct GDAL_link:
        pass

    ctypedef struct RGBA_Color:
        unsigned char r
        unsigned char g
        unsigned char b
        unsigned char a


    ctypedef RGBA_Color RGB_Color

    void Rast_align_window(Cell_head *, Cell_head *)

    int Rast_cell_size(RASTER_MAP_TYPE)

    void *Rast_allocate_buf(RASTER_MAP_TYPE)

    CELL *Rast_allocate_c_buf()

    FCELL *Rast_allocate_f_buf()

    DCELL *Rast_allocate_d_buf()

    char *Rast_allocate_null_buf()

    unsigned char *Rast__allocate_null_bits(int)

    int Rast__null_bitstream_size(int)

    void *Rast_allocate_input_buf(RASTER_MAP_TYPE)

    CELL *Rast_allocate_c_input_buf()

    FCELL *Rast_allocate_f_input_buf()

    DCELL *Rast_allocate_d_input_buf()

    char *Rast_allocate_null_input_buf()

    void *Rast_allocate_output_buf(RASTER_MAP_TYPE)

    CELL *Rast_allocate_c_output_buf()

    FCELL *Rast_allocate_f_output_buf()

    DCELL *Rast_allocate_d_output_buf()

    char *Rast_allocate_null_output_buf()

    int Rast__check_for_auto_masking()

    void Rast_suppress_masking()

    void Rast_unsuppress_masking()

    int Rast_read_cats(const char *, const char *, Categories *)

    int Rast_read_vector_cats(const char *, const char *, Categories *)

    CELL Rast_get_max_c_cat(const char *, const char *)

    char *Rast_get_cats_title(Categories *)

    char *Rast_get_c_cat(CELL *, Categories *)

    char *Rast_get_f_cat(FCELL *, Categories *)

    char *Rast_get_d_cat(DCELL *, Categories *)

    char *Rast_get_cat(void *, Categories *, RASTER_MAP_TYPE)

    void Rast_unmark_cats(Categories *)

    void Rast_mark_c_cats(const CELL *, int, Categories *)

    void Rast_mark_f_cats(const FCELL *, int, Categories *)

    void Rast_mark_d_cats(const DCELL *, int, Categories *)

    int Rast_mark_cats(const void *, int, Categories *, RASTER_MAP_TYPE)

    void Rast_rewind_cats(Categories *)

    char *Rast_get_next_marked_d_cat(Categories *, DCELL *, DCELL *, long *)

    char *Rast_get_next_marked_c_cat(Categories *, CELL *, CELL *, long *)

    char *Rast_get_next_marked_f_cat(Categories *, FCELL *, FCELL *, long *)

    char *Rast_get_next_marked_cat(Categories *, void *, void *, long *, RASTER_MAP_TYPE)

    int Rast_set_c_cat(const CELL *, const CELL *, const char *, Categories *)

    int Rast_set_f_cat(const FCELL *, const FCELL *, const char *, Categories *)

    int Rast_set_d_cat(const DCELL *, const DCELL *, const char *, Categories *)

    int Rast_set_cat(const void *, const void *, const char *, Categories *, RASTER_MAP_TYPE)

    void Rast_write_cats(const char *, Categories *)

    void Rast_write_vector_cats(const char *, Categories *)

    char *Rast_get_ith_d_cat(Categories *, int, DCELL *, DCELL *)

    char *Rast_get_ith_f_cat(Categories *, int, void *, void *)

    char *Rast_get_ith_c_cat(Categories *, int, void *, void *)

    char *Rast_get_ith_cat(Categories *, int, void *, void *, RASTER_MAP_TYPE)

    void Rast_init_cats(const char *, Categories *)

    void Rast_set_cats_title(const char *, Categories *)

    void Rast_set_cats_fmt(const char *, double, double, double, double, Categories *)

    void Rast_free_cats(Categories *)

    void Rast_copy_cats(Categories *, Categories *)

    int Rast_number_of_cats(Categories *)

    int Rast_sort_cats(Categories *)

    void Rast_init_cell_stats(Cell_stats *)

    int Rast_update_cell_stats(const CELL *, int, Cell_stats *)

    int Rast_find_cell_stat(CELL, long *, Cell_stats *)

    int Rast_rewind_cell_stats(Cell_stats *)

    int Rast_next_cell_stat(CELL *, long *, Cell_stats *)

    void Rast_get_stats_for_null_value(long *, Cell_stats *)

    void Rast_free_cell_stats(Cell_stats *)

    char *Rast_get_cell_title(const char *, const char *)

    int Rast_cell_stats_histo_eq(Cell_stats *, CELL, CELL, CELL, CELL, int, void (*)(int, int, int))

    void Rast_close(int)

    void Rast_unopen(int)

    void Rast__unopen_all()

    void Rast_make_ryg_colors(Colors *, CELL, CELL)

    void Rast_make_ryg_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_aspect_colors(Colors *, CELL, CELL)

    void Rast_make_aspect_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_byr_colors(Colors *, CELL, CELL)

    void Rast_make_byr_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_bgyr_colors(Colors *, CELL, CELL)

    void Rast_make_bgyr_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_byg_colors(Colors *, CELL, CELL)

    void Rast_make_byg_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_grey_scale_colors(Colors *, CELL, CELL)

    void Rast_make_grey_scale_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_gyr_colors(Colors *, CELL, CELL)

    void Rast_make_gyr_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_rainbow_colors(Colors *, CELL, CELL)

    void Rast_make_rainbow_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_ramp_colors(Colors *, CELL, CELL)

    void Rast_make_ramp_fp_colors(Colors *, DCELL, DCELL)

    void Rast_make_wave_colors(Colors *, CELL, CELL)

    void Rast_make_wave_fp_colors(Colors *, DCELL, DCELL)

    void Rast_free_colors(Colors *)

    void Rast__color_free_rules(_Color_Info_ *)

    void Rast__color_free_lookup(_Color_Info_ *)

    void Rast__color_free_fp_lookup(_Color_Info_ *)

    void Rast__color_reset(Colors *)

    int Rast_get_color(const void *, int *, int *, int *, Colors *, RASTER_MAP_TYPE)

    int Rast_get_c_color(const CELL *, int *, int *, int *, Colors *)

    int Rast_get_f_color(const FCELL *, int *, int *, int *, Colors *)

    int Rast_get_d_color(const DCELL *, int *, int *, int *, Colors *)

    void Rast_get_null_value_color(int *, int *, int *, Colors *)

    void Rast_get_default_color(int *, int *, int *, Colors *)

    void Rast_make_histogram_eq_colors(Colors *, Cell_stats *)

    void Rast_make_histogram_log_colors(Colors *, Cell_stats *, int, int)

    void Rast_init_colors(Colors *)

    int Rast__insert_color_into_lookup(CELL, int, int, int, _Color_Info_ *)

    void Rast_invert_colors(Colors *)

    void Rast_lookup_c_colors(const CELL *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, int, Colors *)

    void Rast_lookup_colors(const void *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, int, Colors *, RASTER_MAP_TYPE)

    void Rast_lookup_f_colors(const FCELL *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, int, Colors *)

    void Rast_lookup_d_colors(const DCELL *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, int, Colors *)

    void Rast__lookup_colors(const void *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, int, Colors *, int, int, RASTER_MAP_TYPE)

    void Rast__interpolate_color_rule(DCELL, unsigned char *, unsigned char *, unsigned char *, _Color_Rule_ *)

    void Rast__organize_colors(Colors *)

    void Rast_print_colors(Colors *, DCELL, DCELL, FILE *, int)

    void Rast_make_random_colors(Colors *, CELL, CELL)

    void Rast_set_c_color_range(CELL, CELL, Colors *)

    void Rast_set_d_color_range(DCELL, DCELL, Colors *)

    void Rast_get_c_color_range(CELL *, CELL *, Colors *)

    void Rast_get_d_color_range(DCELL *, DCELL *, Colors *)

    int Rast_read_colors(const char *, const char *, Colors *)

    int Rast__read_colors(const char *, const char *, const char *, Colors *)

    void Rast_mark_colors_as_fp(Colors *)

    int Rast_remove_colors(const char *, const char *)

    void Rast_add_d_color_rule(const DCELL *, int, int, int, const DCELL *, int, int, int, Colors *)

    void Rast_add_f_color_rule(const FCELL *, int, int, int, const FCELL *, int, int, int, Colors *)

    void Rast_add_c_color_rule(const CELL *, int, int, int, const CELL *, int, int, int, Colors *)

    void Rast_add_color_rule(const void *, int, int, int, const void *, int, int, int, Colors *, RASTER_MAP_TYPE)

    int Rast_add_modular_d_color_rule(const DCELL *, int, int, int, const DCELL *, int, int, int, Colors *)

    int Rast_add_modular_f_color_rule(const FCELL *, int, int, int, const FCELL *, int, int, int, Colors *)

    int Rast_add_modular_c_color_rule(const CELL *, int, int, int, const CELL *, int, int, int, Colors *)

    int Rast_add_modular_color_rule(const void *, int, int, int, const void *, int, int, int, Colors *, RASTER_MAP_TYPE)

    int Rast_colors_count(Colors *)

    int Rast_get_fp_color_rule(DCELL *, unsigned char *, unsigned char *, unsigned char *, DCELL *, unsigned char *, unsigned char *, unsigned char *, Colors *, int)

#    ctypedef int (read_rule_fn)(void *, DCELL, DCELL, DCELL *, int *, int *, int *, int *, int *, int *)

    int Rast_parse_color_rule(DCELL, DCELL, const char *, DCELL *, int *, int *, int *, int *, int *, int *)

    const char *Rast_parse_color_rule_error(int)

    int Rast_read_color_rule(void *, DCELL, DCELL, DCELL *, int *, int *, int *, int *, int *, int *)

#    int Rast_read_color_rules(Colors *, DCELL, DCELL, read_rule_fn *, void *)

    int Rast_load_colors(Colors *, const char *, CELL, CELL)

    int Rast_load_fp_colors(Colors *, const char *, DCELL, DCELL)

    void Rast_make_colors(Colors *, const char *, CELL, CELL)

    void Rast_make_fp_colors(Colors *, const char *, DCELL, DCELL)

    void Rast_set_c_color(CELL, int, int, int, Colors *)

    void Rast_set_d_color(DCELL, int, int, int, Colors *)

    void Rast_set_null_value_color(int, int, int, Colors *)

    void Rast_set_default_color(int, int, int, Colors *)

    void Rast_shift_c_colors(CELL, Colors *)

    void Rast_shift_d_colors(DCELL, Colors *)

    void Rast_write_colors(const char *, const char *, Colors *)

    void Rast__write_colors(FILE *, Colors *)

    void Rast_histogram_eq_colors(Colors *, Colors *, Cell_stats *)

    void Rast_histogram_eq_fp_colors(Colors *, Colors *, FP_stats *)

    void Rast_log_colors(Colors *, Colors *, int)

    void Rast_abs_log_colors(Colors *, Colors *, int)

    int Rast__check_format(int)

    int Rast__read_row_ptrs(int)

    int Rast__write_row_ptrs(int)

    void Rast_fpreclass_clear(FPReclass *)

    void Rast_fpreclass_reset(FPReclass *)

    void Rast_fpreclass_init(FPReclass *)

    void Rast_fpreclass_set_domain(FPReclass *, DCELL, DCELL)

    void Rast_fpreclass_set_range(FPReclass *, DCELL, DCELL)

    int Rast_fpreclass_get_limits(FPReclass *, DCELL *, DCELL *, DCELL *, DCELL *)

    int Rast_fpreclass_nof_rules(FPReclass *)

    void Rast_fpreclass_get_ith_rule(FPReclass *, int, DCELL *, DCELL *, DCELL *, DCELL *)

    void Rast_fpreclass_set_neg_infinite_rule(FPReclass *, DCELL, DCELL)

    int Rast_fpreclass_get_neg_infinite_rule(FPReclass *, DCELL *, DCELL *)

    void Rast_fpreclass_set_pos_infinite_rule(FPReclass *, DCELL, DCELL)

    int Rast_fpreclass_get_pos_infinite_rule(FPReclass *, DCELL *, DCELL *)

    void Rast_fpreclass_add_rule(FPReclass *, DCELL, DCELL, DCELL, DCELL)

    void Rast_fpreclass_reverse_rule_order(FPReclass *)

    DCELL Rast_fpreclass_get_cell_value(FPReclass *, DCELL)

    void Rast_fpreclass_perform_di(FPReclass *, const DCELL *, CELL *, int)

    void Rast_fpreclass_perform_df(FPReclass *, const DCELL *, FCELL *, int)

    void Rast_fpreclass_perform_dd(FPReclass *, const DCELL *, DCELL *, int)

    void Rast_fpreclass_perform_fi(FPReclass *, const FCELL *, CELL *, int)

    void Rast_fpreclass_perform_ff(FPReclass *, const FCELL *, FCELL *, int)

    void Rast_fpreclass_perform_fd(FPReclass *, const FCELL *, DCELL *, int)

    void Rast_fpreclass_perform_ii(FPReclass *, const CELL *, CELL *, int)

    void Rast_fpreclass_perform_if(FPReclass *, const CELL *, FCELL *, int)

    void Rast_fpreclass_perform_id(FPReclass *, const CELL *, DCELL *, int)

    void Rast_init_gdal()

    GDAL_link *Rast_get_gdal_link(const char *, const char *)

    GDAL_link *Rast_create_gdal_link(const char *, RASTER_MAP_TYPE)

    void Rast_close_gdal_link(GDAL_link *)

    int Rast_close_gdal_write_link(GDAL_link *)

    void Rast_get_cellhd(const char *, const char *, Cell_head *)

    void Rast_get_row_nomask(int, void *, int, RASTER_MAP_TYPE)

    void Rast_get_c_row_nomask(int, CELL *, int)

    void Rast_get_f_row_nomask(int, FCELL *, int)

    void Rast_get_d_row_nomask(int, DCELL *, int)

    void Rast_get_row(int, void *, int, RASTER_MAP_TYPE)

    void Rast_get_c_row(int, CELL *, int)

    void Rast_get_f_row(int, FCELL *, int)

    void Rast_get_d_row(int, DCELL *, int)

    void Rast_get_null_value_row(int, char *, int)

    void Rast_get_row_colors(int, int, Colors *, unsigned char *, unsigned char *, unsigned char *, unsigned char *)

    void Rast_histogram_eq(Histogram *, unsigned char **, CELL *, CELL *)

    void Rast_init_histogram(Histogram *)

    int Rast_read_histogram(const char *, const char *, Histogram *)

    void Rast_write_histogram(const char *, Histogram *)

    void Rast_write_histogram_cs(const char *, Cell_stats *)

    void Rast_make_histogram_cs(Cell_stats *, Histogram *)

    int Rast_get_histogram_num(Histogram *)

    CELL Rast_get_histogram_cat(int, Histogram *)

    long Rast_get_histogram_count(int, Histogram *)

    void Rast_free_histogram(Histogram *)

    int Rast_sort_histogram(Histogram *)

    int Rast_sort_histogram_by_count(Histogram *)

    void Rast_remove_histogram(const char *)

    int Rast_add_histogram(CELL, long, Histogram *)

    int Rast_set_histogram(CELL, long, Histogram *)

    void Rast_extend_histogram(CELL, long, Histogram *)

    void Rast_zero_histogram(Histogram *)

    int Rast__read_history(History *, FILE *)

    int Rast_read_history(const char *, const char *, History *)

    void Rast__write_history(History *, FILE *)

    void Rast_write_history(const char *, History *)

    void Rast_short_history(const char *, const char *, History *)

    int Rast_command_history(History *)

    void Rast_append_history(History *, const char *)

    void Rast_append_format_history(History *, const char *)

    const char *Rast_get_history(History *, int)

    void Rast_set_history(History *, int, const char *)

    void Rast_format_history(History *, int, const char *)

    void Rast_clear_history(History *)

    void Rast_free_history(History *)

    int Rast_history_length(History *)

    const char *Rast_history_line(History *, int)

    void Rast_init()

    void Rast__check_init()

    void Rast_init_all()

    void Rast__init()

    void Rast__error_handler(void *)

    DCELL Rast_interp_linear(double, DCELL, DCELL)

    DCELL Rast_interp_bilinear(double, double, DCELL, DCELL, DCELL, DCELL)

    DCELL Rast_interp_cubic(double, DCELL, DCELL, DCELL, DCELL)

    DCELL Rast_interp_bicubic(double, double, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL)

    DCELL Rast_interp_lanczos(double, double, DCELL *)

    DCELL Rast_interp_cubic_bspline(double, DCELL, DCELL, DCELL, DCELL)

    DCELL Rast_interp_bicubic_bspline(double, double, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL, DCELL)

    char *Rast_mask_info()

    int Rast__mask_info(char *, char *)

    int Rast_maskfd()

    void Rast__set_null_value(void *, int, int, RASTER_MAP_TYPE)

    void Rast_set_null_value(void *, int, RASTER_MAP_TYPE)

    void Rast_set_c_null_value(CELL *, int)

    void Rast_set_f_null_value(FCELL *, int)

    void Rast_set_d_null_value(DCELL *, int)

    int Rast_is_null_value(const void *, RASTER_MAP_TYPE)

    void Rast_insert_null_values(void *, char *, int, RASTER_MAP_TYPE)

    void Rast_insert_c_null_values(CELL *, char *, int)

    void Rast_insert_f_null_values(FCELL *, char *, int)

    void Rast_insert_d_null_values(DCELL *, char *, int)

    int Rast__check_null_bit(const unsigned char *, int, int)

    void Rast__convert_01_flags(const char *, unsigned char *, int)

    void Rast__convert_flags_01(char *, const unsigned char *, int)

    void Rast__init_null_bits(unsigned char *, int)

    int Rast_open_old(const char *, const char *)

    int Rast__open_old(const char *, const char *)

    int Rast_open_c_new(const char *)

    int Rast_open_c_new_uncompressed(const char *)

    void Rast_want_histogram(int)

    void Rast_set_cell_format(int)

    int Rast_get_cell_format(CELL)

    int Rast_open_fp_new(const char *)

    int Rast_open_fp_new_uncompressed(const char *)

    void Rast_set_fp_type(RASTER_MAP_TYPE)

    int Rast_map_is_fp(const char *, const char *)

    RASTER_MAP_TYPE Rast_map_type(const char *, const char *)

    RASTER_MAP_TYPE Rast__check_fp_type(const char *, const char *)

    RASTER_MAP_TYPE Rast_get_map_type(int)

    int Rast_open_new(const char *, RASTER_MAP_TYPE)

    int Rast_open_new_uncompressed(const char *, RASTER_MAP_TYPE)

    void Rast_set_quant_rules(int, Quant *)

    void Rast_put_cellhd(const char *, Cell_head *)

    void Rast_put_row(int, const void *, RASTER_MAP_TYPE)

    void Rast_put_c_row(int, const CELL *)

    void Rast_put_f_row(int, const FCELL *)

    void Rast_put_d_row(int, const DCELL *)

    int Rast__open_null_write(int)

    void Rast__write_null_bits(int, const unsigned char *, int, int, int)

    int Rast_put_cell_title(const char *, const char *)

    void Rast_quant_clear(Quant *)

    void Rast_quant_free(Quant *)

    int Rast__quant_organize_fp_lookup(Quant *)

    void Rast_quant_init(Quant *)

    int Rast_quant_is_truncate(Quant *)

    int Rast_quant_is_round(Quant *)

    void Rast_quant_truncate(Quant *)

    void Rast_quant_round(Quant *)

    int Rast_quant_get_limits(Quant *, DCELL *, DCELL *, CELL *, CELL *)

    int Rast_quant_nof_rules(Quant *)

    void Rast_quant_get_ith_rule(Quant *, int, DCELL *, DCELL *, CELL *, CELL *)

    void Rast_quant_set_neg_infinite_rule(Quant *, DCELL, CELL)

    int Rast_quant_get_neg_infinite_rule(Quant *, DCELL *, CELL *)

    void Rast_quant_set_pos_infinite_rule(Quant *, DCELL, CELL)

    int Rast_quant_get_pos_infinite_rule(Quant *, DCELL *, CELL *)

    void Rast_quant_add_rule(Quant *, DCELL, DCELL, CELL, CELL)

    void Rast_quant_reverse_rule_order(Quant *)

    CELL Rast_quant_get_cell_value(Quant *, DCELL)

    void Rast_quant_perform_d(Quant *, const DCELL *, CELL *, int)

    void Rast_quant_perform_f(Quant *, const FCELL *, CELL *, int)

    Quant_table *Rast__quant_get_rule_for_d_raster_val(Quant *, DCELL)

    int Rast__quant_import(const char *, const char *, Quant *)

    int Rast__quant_export(const char *, const char *, Quant *)

    void Rast_truncate_fp_map(const char *, const char *)

    void Rast_round_fp_map(const char *, const char *)

    void Rast_quantize_fp_map(const char *, const char *, CELL, CELL)

    void Rast_quantize_fp_map_range(const char *, const char *, DCELL, DCELL, CELL, CELL)

    void Rast_write_quant(const char *, const char *, Quant *)

    int Rast_read_quant(const char *, const char *, Quant *)

    void Rast__remove_fp_range(const char *)

    void Rast_construct_default_range(Range *)

    int Rast_read_fp_range(const char *, const char *, FPRange *)

    int Rast_read_range(const char *, const char *, Range *)

    void Rast_write_range(const char *, Range *)

    void Rast_write_fp_range(const char *, FPRange *)

    void Rast_update_range(CELL, Range *)

    void Rast_update_fp_range(DCELL, FPRange *)

    void Rast_row_update_range(const CELL *, int, Range *)

    void Rast__row_update_range(const CELL *, int, Range *, int)

    void Rast_row_update_fp_range(const void *, int, FPRange *, RASTER_MAP_TYPE)

    void Rast_init_range(Range *)

    void Rast_get_range_min_max(Range *, CELL *, CELL *)

    void Rast_init_fp_range(FPRange *)

    void Rast_get_fp_range_min_max(FPRange *, DCELL *, DCELL *)

    int Rast_raster_cmp(const void *, const void *, RASTER_MAP_TYPE)

    void Rast_raster_cpy(void *, const void *, int, RASTER_MAP_TYPE)

    void Rast_set_c_value(void *, CELL, RASTER_MAP_TYPE)

    void Rast_set_f_value(void *, FCELL, RASTER_MAP_TYPE)

    void Rast_set_d_value(void *, DCELL, RASTER_MAP_TYPE)

    CELL Rast_get_c_value(const void *, RASTER_MAP_TYPE)

    FCELL Rast_get_f_value(const void *, RASTER_MAP_TYPE)

    DCELL Rast_get_d_value(const void *, RASTER_MAP_TYPE)

    char *Rast_read_units(const char *, const char *)

    char *Rast_read_vdatum(const char *, const char *)

    void Rast_write_units(const char *, const char *)

    void Rast_write_vdatum(const char *, const char *)

    int Rast_is_reclass(const char *, const char *, char *, char *)

    int Rast_is_reclassed_to(const char *, const char *, int *, char ***)

    int Rast_get_reclass(const char *, const char *, Reclass *)

    void Rast_free_reclass(Reclass *)

    int Rast_put_reclass(const char *, Reclass *)

    DCELL Rast_get_sample_nearest(int, Cell_head *, Categories *, double, double, int)

    DCELL Rast_get_sample_bilinear(int, Cell_head *, Categories *, double, double, int)

    DCELL Rast_get_sample_cubic(int, Cell_head *, Categories *, double, double, int)

    DCELL Rast_get_sample(int, Cell_head *, Categories *, double, double, int, INTERP_TYPE)

    void Rast__init_window()

    void Rast_set_window(Cell_head *)

    void Rast_unset_window()

    void Rast_set_output_window(Cell_head *)

    void Rast_set_input_window(Cell_head *)

    void Rast_get_window(Cell_head *)

    void Rast_get_input_window(Cell_head *)

    void Rast_get_output_window(Cell_head *)

    int Rast_window_rows()

    int Rast_window_cols()

    int Rast_input_window_rows()

    int Rast_input_window_cols()

    int Rast_output_window_rows()

    int Rast_output_window_cols()

    double Rast_northing_to_row(double, Cell_head *)

    double Rast_easting_to_col(double, Cell_head *)

    double Rast_row_to_northing(double, Cell_head *)

    double Rast_col_to_easting(double, Cell_head *)

    void Rast__create_window_mapping(int)

    int Rast_row_repeat_nomask(int, int)

    void Rast_zero_buf(void *, RASTER_MAP_TYPE)

    void Rast_zero_input_buf(void *, RASTER_MAP_TYPE)

    void Rast_zero_output_buf(void *, RASTER_MAP_TYPE)


